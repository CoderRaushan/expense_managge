<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        ul {
    list-style-type: none;
    padding: 0;
}

li {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin: 10px 0;
    padding: 10px;
    position: relative;
}

strong {
    font-size: 1.2em;
}

button {
    margin-left: 10px;
    padding: 5px 10px;
    border: none;
    border-radius: 5px;
    background-color: #000;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}

form {
    display: inline;
}

.edit-form {
    display: none;
    margin-top: 10px;
    background: #f9f9f9;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.edit-form input,
.edit-form select {
    margin-right: 5px;
    padding: 5px;
}

.edit-form button {
    background-color: #28a745;
}

.edit-form button:hover {
    background-color: #218838;
}
    </style>
</head>
<body>
    <h2>Admin Dashboard</h2>
    <h3>Users</h3>
    <ul>
        <% users.forEach(user => { %>
            <li>
                <strong><%= user.username %></strong>
                <ul>
                    <% user.items.forEach(item => { %>
                        <li>
                            <%= item.item_name %> - $<%= item.cost %> - <%= item.category %> - <%= item.date.toLocaleDateString() %>
                            <button onclick="toggleEditForm('<%= user._id %>', '<%= item._id %>')">Edit</button>
                            <form action="/admin/delete-items/<%= user._id %>/<%= item._id %>?_method=delete" method="post" style="display:inline;">
                                <button type="submit">Delete</button>
                            </form>
                            <div id="editForm-<%= user._id %>-<%= item._id %>" style="display:none;">
                                <form action="/admin/edit-item/<%= user._id %>/<%= item._id %>" method="POST" style="display:inline;">
                                    <input type="text" name="item_name" placeholder="New Item Name" value=" <%= item.item_name %>" required>
                                    <input type="number" name="cost" placeholder="New Cost" value="<%= item.cost %>" required>
                                    <select name="category">
                                        <option selected><%= item.category %></option>
                                        <option value="Food">Food</option>
                                        <option value="Transport">Transport</option>
                                        <option value="Utilities">Utilities</option>
                                        <option value="Other">Other</option>
                                    </select>
                                    <input type="date" name="date" required value="<%= item.date.toISOString().slice(0, 10) %>">
                                    <button type="submit">Edit</button>
                                </form>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            </li>
        <% }) %>
    </ul>
    <h3>Expense Graph</h3>
    <canvas id="expenseChart"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        fetch('/admin/graph-data')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                const labels = [...new Set(data.map(item => item.date))]; // Unique dates for x-axis
                const costsByDate = {};
                const detailsByDate = {};
    
                // Aggregate costs and store details by date
                data.forEach(item => {
                    if (!costsByDate[item.date]) {
                        costsByDate[item.date] = 0; // Initialize if not present
                        detailsByDate[item.date] = []; // Initialize details array
                    }
                    costsByDate[item.date] += item.cost; // Sum costs for the same date
                    // Store each item's details
                    detailsByDate[item.date].push({
                        itemName: item.item_name, // Assuming 'item_name' is the field in your data
                        cost: item.cost,
                        username: item.username // Assuming 'username' is the field in your data
                    });
                });
    
                // Prepare the data for the chart
                const costs = labels.map(label => costsByDate[label] || 0); // Map costs to unique dates
    
                const ctx = document.getElementById('expenseChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar', // Type of the chart
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Total Expenses',
                            data: costs,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Light background color
                            borderColor: 'rgba(75, 192, 192, 1)', // Border color for the bars
                            borderWidth: 1 // Border width
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true // Y-axis starts from 0
                            }
                        },
                        plugins: {
                            tooltip: {
                                enabled: true, // Enable tooltips
                                callbacks: {
                                    title: function(tooltipItems) {
                                        // Show date as title
                                        return tooltipItems[0].label;
                                    },
                                    label: function(tooltipItem) {
                                        const date = tooltipItem.label;
                                        const details = detailsByDate[date];
                                        let label = `Total: ₹${tooltipItem.raw}`; // Use tooltipItem.raw to get the value
    
                                        // Adding details
                                        if (details) {
                                            label += '\nDetails:\n';
                                            details.forEach(detail => {
                                                label += `- ${detail.itemName}: ₹${detail.cost} (User: ${detail.username})\n`;
                                            });
                                        }
                                        return label.split("\n"); // Return as an array to display in tooltip
                                    }
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching the graph data:', error);
            });
    </script>
    
    <script>
        function toggleEditForm(userId, itemId) {
            const form = document.getElementById(`editForm-${userId}-${itemId}`);
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }
    </script>
</body>
</html>